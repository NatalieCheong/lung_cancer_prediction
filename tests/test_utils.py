# -*- coding: utf-8 -*-
"""test_utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B3HtoJHBg5yheQj-SMPisB4wYuh4jFrL
"""

import pytest
import os
import numpy as np
import pandas as pd
from sklearn.metrics import classification_report
from sklearn.ensemble import RandomForestClassifier
from src.utils import Logger, validate_data, plot_roc_curves, create_results_directory, save_model_results

def test_data_validation():
    """Test data validation function."""
    # Create valid data
    valid_data = pd.DataFrame({
        'Age': [45, 55],
        'Gender': [1, 2],
        'Level': ['Low', 'High'],
        'Air Pollution': [3, 4],
        'Smoking': [2, 3]
    })
    
    # Test valid data
    is_valid, issues = validate_data(valid_data)
    print(f"Validation issues found: {issues}")  # For debugging
    assert is_valid, f"Data should be valid but found issues: {issues}"
    assert len(issues) == 0, f"Should have no issues but found: {issues}"
    
    # Test invalid data
    invalid_data = pd.DataFrame({
        'Age': [150, 55],  # Invalid age
        'Gender': [1, 3],  # Invalid gender
        'Level': ['Low', 'High'],
        'Air Pollution': [3, 12],  # Invalid pollution level
        'Smoking': [2, 3]
    })
    
    is_valid, issues = validate_data(invalid_data)
    assert not is_valid, "Data should be invalid"
    assert len(issues) > 0, "Should have found issues with invalid data"

def test_save_model_results():
    """Test model results saving functionality."""
    # Create sample data
    X_test = np.random.rand(100, 5)
    y_test = np.random.randint(0, 3, 100)

    # Create and fit model
    clf = RandomForestClassifier(random_state=42)
    clf.fit(X_test, y_test)
    models = {'RF': clf}

    # Create results directory
    results_dir = create_results_directory()

    # Test saving results
    results_df = save_model_results(models, results_dir, X_test, y_test)
    assert isinstance(results_df, pd.DataFrame)
    assert 'model_name' in results_df.columns

    # Cleanup
    os.remove(os.path.join(results_dir, 'reports', 'model_comparison.csv'))
    for d in ['models', 'plots', 'reports', 'analysis']:
        os.rmdir(os.path.join(results_dir, d))
    os.rmdir(results_dir)