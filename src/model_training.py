# -*- coding: utf-8 -*-
"""model_training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1573Wez04QKVulLL7k55i51NpoSHOwyFf
"""

# model_training.py
from config import *

def train_models(X_train_scaled, y_train):
    """Train all models."""
    models = {
        'SVM': SVC(kernel='rbf', probability=True),
        'KNN': KNeighborsClassifier(n_neighbors=5),
        'Decision Tree': DecisionTreeClassifier(random_state=RANDOM_STATE),
        'Random Forest': RandomForestClassifier(random_state=RANDOM_STATE)
    }

    # Train each model
    for name, model in models.items():
        model.fit(X_train_scaled, y_train)

    return models

def evaluate_models(models, X_test_scaled, y_test, X):
    """Evaluate all trained models."""
    for name, model in models.items():
        print(f"\nTraining {name}...")

        # Make predictions
        y_pred = model.predict(X_test_scaled)

        # Calculate metrics
        r2 = r2_score(y_test, y_pred)

        # Plot confusion matrix
        plt.figure(figsize=(8, 6))
        cm = confusion_matrix(y_test, y_pred)
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
        plt.title(f'Confusion Matrix - {name}')
        plt.ylabel('True Label')
        plt.xlabel('Predicted Label')
        plt.show()

        # Print metrics
        print(f"\nMetrics for {name}:")
        print(f"R2 Score: {r2:.4f}")
        print("\nClassification Report:")
        print(classification_report(y_test, y_pred))

        # Plot feature importance for tree-based models
        if name in ['Decision Tree', 'Random Forest']:
            plt.figure(figsize=(12, 6))
            importance = model.feature_importances_
            indices = np.argsort(importance)[::-1]
            plt.title(f"Feature Importances ({name})")
            plt.bar(range(len(importance)), importance[indices])
            plt.xticks(range(len(importance)),
                      [X.columns[i] for i in indices],
                      rotation=45,
                      ha='right')
            plt.tight_layout()
            plt.show()